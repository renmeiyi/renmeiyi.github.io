<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis笔记</title>
      <link href="/2024/07/02/Redis%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/07/02/Redis%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MyySQL笔记</title>
      <link href="/2024/07/02/MyySQL%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/07/02/MyySQL%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java进阶</title>
      <link href="/2024/07/02/Java%E8%BF%9B%E9%98%B6/"/>
      <url>/2024/07/02/Java%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记</title>
      <link href="/2024/07/02/Java%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/07/02/Java%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象编程（基础）"><a href="#面向对象编程（基础）" class="headerlink" title="面向对象编程（基础）"></a>面向对象编程（基础）</h2><h3 id="1、类与对象"><a href="#1、类与对象" class="headerlink" title="1、类与对象"></a>1、类与对象</h3><blockquote><p>1、使用变量来管理不利于数据的管理，</p><p>2、数组难以体现数据类型，</p><p>3、不能体现行为信息。</p><p>故引出类与对象（OOP）的概念</p></blockquote><p>一个程序就是一个世界，有很多事物（对象[属性，行为]）</p><p>类是一种定义的数据类型，可以是Java定义的也可以是自定义的。</p><p>Java定义例如：int，String</p><p>对象就是一个具体的实例。</p><p>例如类是设计图纸，对象就是根据类具体出的实物。（实物的属性行为，尺寸、颜色等根据设计图纸进行限制，但需要跟设计图纸中的基本保持一致）</p><h3 id="2、使用面向对象的方式来创建类"><a href="#2、使用面向对象的方式来创建类" class="headerlink" title="2、使用面向对象的方式来创建类"></a>2、使用面向对象的方式来创建类</h3><p>创建类的举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    String color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例化对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//使用变量</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">cat1Name</span> <span class="operator">=</span> <span class="string">&quot;小白&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cat2Name</span> <span class="operator">=</span> <span class="string">&quot;小花&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">cat1Age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cat2Age</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">cat1Color</span> <span class="operator">=</span> <span class="string">&quot;白色&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cat2Color</span> <span class="operator">=</span> <span class="string">&quot;花色&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//oop实例化一只猫</span></span><br><span class="line">        <span class="comment">//1、new Cat（）创建一只猫</span></span><br><span class="line">        <span class="comment">//2、将创建的猫赋值给cat1、cat2</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        cat1.age = <span class="number">18</span>;</span><br><span class="line">        cat1.color = cat1Color;</span><br><span class="line">        cat1.name = cat1Name;</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        cat2.age = <span class="number">100</span>;</span><br><span class="line">        cat2.color = cat2Color;</span><br><span class="line">        cat2.name = cat2Name;</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="对象在内存中存在形式："><a href="#对象在内存中存在形式：" class="headerlink" title="对象在内存中存在形式："></a>对象在内存中存在形式：</h4><p><img src="/2024/07/02/Java%E7%AC%94%E8%AE%B0/Users\74432\AppData\Roaming\Typora\typora-user-images\image-20240703113028398.png" alt="image-20240703113028398"></p><p>​如果数据类型是String，则会将信息存到内存中的方法区中，在堆中仅显示方法区地址。如果是int这种基本数据类型则会直接存入堆中的对应位置。</p><blockquote><p>1、属性的定义语法同变量，示例：访问修饰符 属性类型 属性名。</p><p>2、属性的定义类型可以为任意类型，包含基本类型或引用类型。</p><p>3、属性如果不赋值，有默认值，规则和数组一致。</p></blockquote><h4 id="类和对象的内存分配机制（重要）"><a href="#类和对象的内存分配机制（重要）" class="headerlink" title="类和对象的内存分配机制（重要）"></a>类和对象的内存分配机制（重要）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">      p1.age = <span class="number">10</span>;</span><br><span class="line">      p1.name = <span class="string">&quot;xiaoming&quot;</span>;</span><br><span class="line">      <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> p1; <span class="comment">//把p1的值赋给p2</span></span><br><span class="line">      System.out.println(p2.age);</span><br></pre></td></tr></table></figure><p>第一行代码首先要在方法区进行加载，加载Person的信息</p><p>​new在堆里开辟空间，属性是默认值</p><p>栈中的p1指向堆中的指定空间</p><p>然后将堆中的age赋值为10</p><p>string常量池中name赋值为“xiaoming”，堆中存常量池的地址</p><p>然后在栈中创建的p2的地址与p1的地址相同，p2指向堆中p1所在的位置</p><p><img src="/2024/07/02/Java%E7%AC%94%E8%AE%B0/Users\74432\AppData\Roaming\Typora\typora-user-images\image-20240704103759226.png" alt="image-20240704103759226"></p><p>p201练习值得反复看！</p><h3 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Method01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.speak();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="comment">//&#123;&#125;是方法体，可以写代码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speak</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一个好人&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法的调用机制分析"><a href="#方法的调用机制分析" class="headerlink" title="方法的调用机制分析"></a>方法的调用机制分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">      person.speak();</span><br><span class="line">      <span class="type">int</span> <span class="variable">resultRes</span> <span class="operator">=</span> person.getSum(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line">      System.out.println(resultRes);</span><br><span class="line"></span><br><span class="line">String name;</span><br><span class="line">      <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//成员方法</span></span><br><span class="line">      <span class="comment">//&#123;&#125;是方法体，可以写代码</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speak</span><span class="params">()</span>&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;我是一个好人&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> numberA, <span class="type">int</span> numberB)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> numberA + numberB;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>首先在栈创建一个空间，在堆中有一个相应的对象产生。</p><p>第二行代码，先执行getSum，然后在栈中产生一个独立的空间，numberA-&gt;10,numberB-&gt;20。然后通过地址定位到对象类的对应方法进行计算。然后reture结果给栈中的空间，return之后独立的空间就会消失，当main栈执行完毕后也会消失，整个程序退出。</p><p><img src="/2024/07/02/Java%E7%AC%94%E8%AE%B0/Users\74432\AppData\Roaming\Typora\typora-user-images\image-20240704110522542.png" alt="image-20240704110522542"></p><h4 id="方法的传参机制"><a href="#方法的传参机制" class="headerlink" title="方法的传参机制"></a>方法的传参机制</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Swap</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">AA</span> <span class="variable">aa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AA</span>();</span><br><span class="line">        aa.Swap(a,b);</span><br><span class="line">        System.out.println(<span class="string">&quot;a = &quot;</span>+ a + <span class="string">&quot; b = &quot;</span> + b );</span><br><span class="line">        <span class="comment">//上面这句话输出a=10，b=20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Swap</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">        System.out.println(<span class="string">&quot;a=&quot;</span>+a+<span class="string">&quot; b=&quot;</span>+b);<span class="comment">//这句话a输出20，b10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四种访问修饰符"><a href="#四种访问修饰符" class="headerlink" title="四种访问修饰符"></a>四种访问修饰符</h3><h4 id="public"><a href="#public" class="headerlink" title="public"></a>public</h4><h4 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h4><h4 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h4><h4 id="private"><a href="#private" class="headerlink" title="private"></a>private</h4>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法Java</title>
      <link href="/2024/07/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95Java-1/"/>
      <url>/2024/07/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95Java-1/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构与算法Java"><a href="#数据结构与算法Java" class="headerlink" title="数据结构与算法Java"></a>数据结构与算法Java</h1><h2 id="1、数据结构与算法内容介绍"><a href="#1、数据结构与算法内容介绍" class="headerlink" title="1、数据结构与算法内容介绍"></a>1、数据结构与算法内容介绍</h2><h3 id="1-1内容介绍"><a href="#1-1内容介绍" class="headerlink" title="1.1内容介绍"></a>1.1内容介绍</h3><h4 id="1-1-1常见面试算法题"><a href="#1-1-1常见面试算法题" class="headerlink" title="1.1.1常见面试算法题"></a>1.1.1常见面试算法题</h4><h2 id="2、线性结构与非线性结构"><a href="#2、线性结构与非线性结构" class="headerlink" title="2、线性结构与非线性结构"></a>2、线性结构与非线性结构</h2><h3 id="2-1线性结构"><a href="#2-1线性结构" class="headerlink" title="2.1线性结构"></a>2.1线性结构</h3><blockquote><p>1、线性结构作为最常用的数据结构，其特点是数据元素之间存在一对一的线性关系</p><p>2、线性结构有两种不同的存储结构，即顺序存储结构（数组）和链式存储结构（链表）。顺序存储的线性表称为顺序表，顺序表中的存储元素是连续的</p><p>3、链式存储的线性表称为链表，链表中的存储元素不一定连续的，元素节点中存放数据元素以及相邻元素的地址</p><p>4、线性结构常见的有：数组、队列、链表和栈。</p></blockquote><h3 id="2-2非线性结构"><a href="#2-2非线性结构" class="headerlink" title="2.2非线性结构"></a>2.2非线性结构</h3><blockquote><p>非线性结构包括：二维数组，多维数组，广义表，树结构，图结构</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/06/30/hello-world/"/>
      <url>/2024/06/30/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
